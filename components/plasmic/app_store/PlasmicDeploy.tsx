// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kE2m6SaQqQewvhrZdkGhrf
// Component: o8zUWsy5LVXF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: SeN-_u-Bb4MZ/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import TextInput from "../../TextInput"; // plasmic-import: 20BEVE161Tub/component
import Select from "../../Select"; // plasmic-import: IPsHMEFnMbCe/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshFSeMrw7Uuy } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: h_fSEMrw7Uuy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: kE2m6SaQqQewvhrZdkGhrf/projectcss
import sty from "./PlasmicDeploy.module.css"; // plasmic-import: o8zUWsy5LVXF/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: LwBmQ7p7bmsl/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: Uv6mWKVW5aWf/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: akcTM9Ae0af4/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: jyFOmxNthMrg/icon

createPlasmicElementProxy;

export type PlasmicDeploy__VariantMembers = {};
export type PlasmicDeploy__VariantsArgs = {};
type VariantPropType = keyof PlasmicDeploy__VariantsArgs;
export const PlasmicDeploy__VariantProps = new Array<VariantPropType>();

export type PlasmicDeploy__ArgsType = {};
type ArgPropType = keyof PlasmicDeploy__ArgsType;
export const PlasmicDeploy__ArgProps = new Array<ArgPropType>();

export type PlasmicDeploy__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  appCatalogFetcher?: Flex__<typeof DataFetcher>;
  appImage?: Flex__<typeof PlasmicImg__>;
  apiUrlInput?: Flex__<typeof TextInput>;
  httpsappstoredarkubeapphmvrToken?: Flex__<"a"> & Partial<LinkProps>;
  tokenInput?: Flex__<typeof TextInput>;
  orgFetcher?: Flex__<typeof DataFetcher>;
  orgSelect?: Flex__<typeof Select>;
  zoneFetcher?: Flex__<typeof DataFetcher>;
  zoneSelect?: Flex__<typeof Select>;
  nsFetcher?: Flex__<typeof DataFetcher>;
  nameSpaceSelect?: Flex__<typeof Select>;
  appNameInput?: Flex__<typeof TextInput>;
  domainInput?: Flex__<typeof TextInput>;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  domainText?: Flex__<"div">;
  installButton?: Flex__<typeof Button>;
};

export interface DefaultDeployProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDeploy__RenderFunc(props: {
  variants: PlasmicDeploy__VariantsArgs;
  args: PlasmicDeploy__ArgsType;
  overrides: PlasmicDeploy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tokenInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "appNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "zoneSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "nameSpaceSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "orgSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "domainInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "organizationName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "paziresh24-cloud"
      },
      {
        path: "isDomainValid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "apiUrlInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.CatalogData.find(
                item => item.value === $ctx.params.app
              ).api;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "installing",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshFSeMrw7Uuy()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yJaeN)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vMMuR)}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"40px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"40px"}
                src={{
                  src: "/plasmic/app_store/images/appIconjpg.jpg",
                  fullWidth: 360,
                  fullHeight: 360,
                  aspectRatio: undefined
                }}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bI2)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__jizTg)}
                  color={"clear"}
                  endIcon={
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___9EbLq)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__awKn1)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__biLcq
                    )}
                  >
                    {"Help"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__osu0)}
                  color={"red"}
                  endIcon={
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__mwWmY)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__iwOt)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l8FDd
                    )}
                  >
                    {"Contact"}
                  </div>
                </Button>
              </Stack__>
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__yietI)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__p03G4
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Button
                    className={classNames("__wab_instance", sty.button__a1RYh)}
                    color={"clear"}
                    endIcon={
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__pf2W3)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__yqSda)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tmpLe
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button>
                </div>
              ) : null}
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7F9Z)}
          >
            <DataFetcher
              data-plasmic-name={"appCatalogFetcher"}
              data-plasmic-override={overrides.appCatalogFetcher}
              className={classNames("__wab_instance", sty.appCatalogFetcher)}
              dataName={"CatalogData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              headers={{
                "Content-Type": "application/json",
                Accept: "application/json"
              }}
              loadingDisplay={
                <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
              }
              method={"GET"}
              noLayout={false}
              queryKey={"catalog"}
              url={"https://fti-workflow.paziresh24.com/webhook/app-catalog"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <React.Fragment>
                    <PlasmicImg__
                      data-plasmic-name={"appImage"}
                      data-plasmic-override={overrides.appImage}
                      alt={""}
                      className={classNames(sty.appImage)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $ctx.CatalogData.find(
                            item => item.value === $ctx.params.app
                          ).icon;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/app_store/images/appIconjpg.jpg",
                              fullWidth: 360,
                              fullHeight: 360,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                    />

                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.apiUrlInput
                        ),
                        name: "apiUrlInput",
                        onChange: (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "apiUrlInput",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        },
                        required: false,
                        value:
                          generateStateValueProp($state, [
                            "apiUrlInput",
                            "value"
                          ]) ?? ""
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "apiUrlInput.value",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return $ctx.CatalogData.find(
                                    item => item.value === $ctx.params.app
                                  ).api;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],
                        []
                      );
                      return (
                        <TextInput
                          data-plasmic-name={"apiUrlInput"}
                          data-plasmic-override={overrides.apiUrlInput}
                          {...child$Props}
                        />
                      );
                    })()}
                  </React.Fragment>
                )}
              </DataCtxReader__>
            </DataFetcher>
            <PlasmicLink__
              data-plasmic-name={"httpsappstoredarkubeapphmvrToken"}
              data-plasmic-override={overrides.httpsappstoredarkubeapphmvrToken}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.httpsappstoredarkubeapphmvrToken
              )}
              component={Link}
              href={"https://appstore.darkube.app/hmvr-token"}
              platform={"nextjs"}
            >
              {
                "\u062a\u0648\u06a9\u0646 \u0647\u0645\u0631\u0648\u0634 ( \u0631\u0627\u0647\u0646\u0645\u0627 )"
              }
            </PlasmicLink__>
            <TextInput
              data-plasmic-name={"tokenInput"}
              data-plasmic-override={overrides.tokenInput}
              className={classNames("__wab_instance", sty.tokenInput)}
              name={"TokenInput"}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["tokenInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"\u062a\u0648\u06a9\u0646"}
              required={true}
              value={
                generateStateValueProp($state, ["tokenInput", "value"]) ?? ""
              }
            />

            {(() => {
              try {
                return (
                  $state.tokenInput.value != null &&
                  $state.tokenInput.value.length >= 36
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <DataFetcher
                data-plasmic-name={"orgFetcher"}
                data-plasmic-override={overrides.orgFetcher}
                className={classNames("__wab_instance", sty.orgFetcher)}
                dataName={"OrgData"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qMoMb
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchError.info.error;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Error fetching data";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    )}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                headers={(() => {
                  try {
                    return {
                      "Content-Type": "application/json",
                      Accept: "application/json",
                      token: `${$state.tokenInput.value}`
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {};
                    }
                    throw e;
                  }
                })()}
                loadingDisplay={
                  <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                }
                method={"POST"}
                noLayout={false}
                previewSpinner={false}
                url={"https://fti-workflow.paziresh24.com/webhook/hmrv/orgs"}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lmi76
                        )}
                      >
                        {"\u0633\u0627\u0632\u0645\u0627\u0646"}
                      </div>
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Select
                          data-plasmic-name={"orgSelect"}
                          data-plasmic-override={overrides.orgSelect}
                          className={classNames(
                            "__wab_instance",
                            sty.orgSelect
                          )}
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "orgSelect",
                                "value"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);
                            (async value => {
                              const $steps = {};

                              $steps["updateOrganizationName"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["organizationName"]
                                      },
                                      operation: 0,
                                      value: $ctx.OrgData.find(
                                        org =>
                                          org.id ===
                                          parseInt($state.orgSelect.value)
                                      ).name
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateOrganizationName"] != null &&
                                typeof $steps["updateOrganizationName"] ===
                                  "object" &&
                                typeof $steps["updateOrganizationName"].then ===
                                  "function"
                              ) {
                                $steps["updateOrganizationName"] = await $steps[
                                  "updateOrganizationName"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $ctx.OrgData.map(org => ({
                                value: org.id,
                                label: org.name
                              }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={"Select\u2026"}
                          value={generateStateValueProp($state, [
                            "orgSelect",
                            "value"
                          ])}
                        />
                      ) : null}
                    </React.Fragment>
                  )}
                </DataCtxReader__>
              </DataFetcher>
            ) : null}
            {(() => {
              try {
                return $state.orgSelect.value != null;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <DataFetcher
                data-plasmic-name={"zoneFetcher"}
                data-plasmic-override={overrides.zoneFetcher}
                className={classNames("__wab_instance", sty.zoneFetcher)}
                dataName={"fetchedData"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mk2MD
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchError.info.error;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Error fetching data";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    )}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                headers={(() => {
                  try {
                    return {
                      "Content-Type": "application/json",
                      Accept: "application/json",
                      token: `${$state.tokenInput.value}`
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {};
                    }
                    throw e;
                  }
                })()}
                loadingDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__fQvjP)}
                        role={"img"}
                      />
                    )}
                  </DataCtxReader__>
                }
                method={"GET"}
                noLayout={false}
                previewSpinner={false}
                url={(() => {
                  try {
                    return `https://fti-workflow.paziresh24.com/webhook/cd92331d-3f6b-49db-a21b-6cd5efa0c133/hmrv/${$state.orgSelect.value}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4St0F
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tBmv1
                        )}
                      >
                        {"\u062f\u06cc\u062a\u0627\u0633\u0646\u062a\u0631"}
                      </div>
                      <Select
                        data-plasmic-name={"zoneSelect"}
                        data-plasmic-override={overrides.zoneSelect}
                        className={classNames("__wab_instance", sty.zoneSelect)}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "zoneSelect",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        options={(() => {
                          try {
                            return $ctx.fetchedData.map(item => ({
                              label: item.location_datacenter,
                              value: item.id
                            }));
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        placeholder={"Select\u2026"}
                        value={generateStateValueProp($state, [
                          "zoneSelect",
                          "value"
                        ])}
                      />
                    </Stack__>
                  )}
                </DataCtxReader__>
              </DataFetcher>
            ) : null}
            {(() => {
              try {
                return $state.zoneSelect.value != null;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <DataFetcher
                data-plasmic-name={"nsFetcher"}
                data-plasmic-override={overrides.nsFetcher}
                className={classNames("__wab_instance", sty.nsFetcher)}
                dataName={"fetchedData"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => "Error fetching data"}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                headers={(() => {
                  try {
                    return {
                      "Content-Type": "application/json",
                      Accept: "application/json",
                      token: `${$state.tokenInput.value}`
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {};
                    }
                    throw e;
                  }
                })()}
                loadingDisplay={null}
                method={"GET"}
                noLayout={false}
                url={(() => {
                  try {
                    return (
                      "https://fti-workflow.paziresh24.com/webhook/54f0a644-6cc3-43c9-a1c2-408928f596ce/hmrv/" +
                      $state.orgSelect.value +
                      "/" +
                      $state.zoneSelect.value
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__crNoD)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hc2Li
                        )}
                      >
                        {"\u0641\u0636\u0627\u06cc \u0646\u0627\u0645"}
                      </div>
                      <Select
                        data-plasmic-name={"nameSpaceSelect"}
                        data-plasmic-override={overrides.nameSpaceSelect}
                        className={classNames(
                          "__wab_instance",
                          sty.nameSpaceSelect
                        )}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "nameSpaceSelect",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        options={(() => {
                          try {
                            return $ctx.fetchedData.map(item => ({
                              label: item.name,
                              value: item.id
                            }));
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        placeholder={"Select\u2026"}
                        value={generateStateValueProp($state, [
                          "nameSpaceSelect",
                          "value"
                        ])}
                      />
                    </Stack__>
                  )}
                </DataCtxReader__>
              </DataFetcher>
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nXGl2
              )}
            >
              {
                "\u0646\u0627\u0645 \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646 (\u062d\u0631\u0648\u0641 \u0627\u0646\u06af\u0644\u06cc\u0633\u06cc \u0628\u062f\u0648\u0646 \u0641\u0627\u0635\u0644\u0647)"
              }
            </div>
            {(() => {
              try {
                return $state.nameSpaceSelect.value != null;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <TextInput
                data-plasmic-name={"appNameInput"}
                data-plasmic-override={overrides.appNameInput}
                className={classNames("__wab_instance", sty.appNameInput)}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["appNameInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={"\u0646\u0627\u0645 \u0627\u067e"}
                required={false}
                startIcon={
                  <SearchsvgIcon
                    className={classNames(projectcss.all, sty.svg__hrstu)}
                    role={"img"}
                  />
                }
                value={
                  generateStateValueProp($state, ["appNameInput", "value"]) ??
                  ""
                }
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1QMjK
              )}
            >
              {
                "\u0646\u0627\u0645 \u0632\u06cc\u0631 \u062f\u0627\u0645\u0646\u0647 \u062f\u0627\u0631\u06a9\u0648\u0628"
              }
            </div>
            {(() => {
              try {
                return $state.appNameInput.value.length > 1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <TextInput
                data-plasmic-name={"domainInput"}
                data-plasmic-override={overrides.domainInput}
                className={classNames("__wab_instance", sty.domainInput)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["domainInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);
                  (async event => {
                    const $steps = {};
                  }).apply(null, eventArgs);
                }}
                placeholder={
                  "\u0646\u0627\u0645 \u062f\u0627\u0645\u0646\u0647"
                }
                value={
                  generateStateValueProp($state, ["domainInput", "value"]) ?? ""
                }
              />
            ) : null}
            <DataFetcher
              data-plasmic-name={"httpRestApiFetcher"}
              data-plasmic-override={overrides.httpRestApiFetcher}
              body={undefined}
              className={classNames("__wab_instance", sty.httpRestApiFetcher)}
              dataName={"fetchedData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              headers={(() => {
                try {
                  return {
                    "Content-Type": "application/json",
                    Accept: "application/json",
                    token: $state.tokenInput.value
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      "Content-Type": "application/json",
                      Accept: "application/json"
                    };
                  }
                  throw e;
                }
              })()}
              loadingDisplay={
                <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
              }
              method={"GET"}
              noLayout={false}
              queryKey={(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={(() => {
                try {
                  return (
                    "https://fti-workflow.paziresh24.com/webhook/hmvr/domain?domain=" +
                    $state.domainInput.value +
                    "&x-organization=" +
                    $state.organizationName
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <DataCtxReader__>
                {$ctx =>
                  (() => {
                    try {
                      return $state.domainInput.value.length > 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"domainText"}
                      data-plasmic-override={overrides.domainText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.domainText
                      )}
                      color={``}
                      style={(() => {
                        try {
                          return {
                            color:
                              $ctx.fetchedData[0].is_valid === true
                                ? "#00C503"
                                : "#FF2D00"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return { color: "black" };
                          }
                          throw e;
                        }
                      })()}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "https://" +
                              $state.domainInput.value +
                              ".darkube.app " +
                              ($ctx.fetchedData[0].is_valid === true
                                ? "قابل ثبت است"
                                : "قابل ثبت نیست")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ) : null
                }
              </DataCtxReader__>
            </DataFetcher>
            <Button
              data-plasmic-name={"installButton"}
              data-plasmic-override={overrides.installButton}
              className={classNames("__wab_instance", sty.installButton)}
              isDisabled={(() => {
                try {
                  return (
                    $state.appNameInput.value.length < 2 ||
                    $state.installing === true
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateInstalling"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["installing"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateInstalling"] != null &&
                  typeof $steps["updateInstalling"] === "object" &&
                  typeof $steps["updateInstalling"].then === "function"
                ) {
                  $steps["updateInstalling"] = await $steps["updateInstalling"];
                }

                $steps["sendRequest"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          (() => {
                            try {
                              return $state.apiUrlInput.value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return {
                                app_name: $state.appNameInput.value,
                                "x-organization": $state.organizationName,
                                organization_id: $state.orgSelect.value,
                                namespace_id: $state.nameSpaceSelect.value,
                                domain_name: $state.domainInput.value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return {
                                headers: { token: $state.tokenInput.value }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["sendRequest"] != null &&
                  typeof $steps["sendRequest"] === "object" &&
                  typeof $steps["sendRequest"].then === "function"
                ) {
                  $steps["sendRequest"] = await $steps["sendRequest"];
                }

                $steps["toast"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "\u0645\u0631\u0627\u062d\u0644 \u0646\u0635\u0628 \u0634\u0631\u0648\u0639 \u0634\u062f. \u0644\u0637\u0641\u0627 \u062f\u0642\u0627\u06cc\u0642\u06cc \u062f\u06cc\u06af\u0631 \u0628\u0647 \u0622\u062f\u0631\u0633 \u062f\u0627\u0645\u0646\u0647 \u062e\u0648\u062f \u0645\u0631\u0627\u062c\u0639\u0647 \u06a9\u0646\u06cc\u062f \u0648 \u0647\u0645\u0686\u0646\u06cc\u0646 \u062f\u0631 \u06a9\u0646\u0633\u0648\u0644 \u0647\u0645\u200c\u0631\u0648\u0634 \u0645\u06cc\u062a\u0648\u0627\u0646\u06cc\u062f \u0648\u0636\u0639\u06cc\u062a \u0627\u0633\u0642\u0631\u0627\u0631 \u0631\u0627 \u0645\u0634\u0627\u0647\u062f\u0647 \u0646\u0645\u0627\u06cc\u06cc\u062f.",
                          "top-center",
                          10000
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["toast"] != null &&
                  typeof $steps["toast"] === "object" &&
                  typeof $steps["toast"].then === "function"
                ) {
                  $steps["toast"] = await $steps["toast"];
                }

                $steps["updateInstalling2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["installing"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateInstalling2"] != null &&
                  typeof $steps["updateInstalling2"] === "object" &&
                  typeof $steps["updateInstalling2"].then === "function"
                ) {
                  $steps["updateInstalling2"] = await $steps[
                    "updateInstalling2"
                  ];
                }
              }}
              shape={"rounded"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.installing === true
                      ? "در حال نصب - لطفا صبور باشید"
                      : "شروع نصب";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0646\u0635\u0628";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </Button>
          </Stack__>
          {(() => {
            try {
              return $state.installing;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__ttXNp)}
              role={"img"}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "appCatalogFetcher",
    "appImage",
    "apiUrlInput",
    "httpsappstoredarkubeapphmvrToken",
    "tokenInput",
    "orgFetcher",
    "orgSelect",
    "zoneFetcher",
    "zoneSelect",
    "nsFetcher",
    "nameSpaceSelect",
    "appNameInput",
    "domainInput",
    "httpRestApiFetcher",
    "domainText",
    "installButton"
  ],
  img: ["img"],
  appCatalogFetcher: ["appCatalogFetcher", "appImage", "apiUrlInput"],
  appImage: ["appImage"],
  apiUrlInput: ["apiUrlInput"],
  httpsappstoredarkubeapphmvrToken: ["httpsappstoredarkubeapphmvrToken"],
  tokenInput: ["tokenInput"],
  orgFetcher: ["orgFetcher", "orgSelect"],
  orgSelect: ["orgSelect"],
  zoneFetcher: ["zoneFetcher", "zoneSelect"],
  zoneSelect: ["zoneSelect"],
  nsFetcher: ["nsFetcher", "nameSpaceSelect"],
  nameSpaceSelect: ["nameSpaceSelect"],
  appNameInput: ["appNameInput"],
  domainInput: ["domainInput"],
  httpRestApiFetcher: ["httpRestApiFetcher", "domainText"],
  domainText: ["domainText"],
  installButton: ["installButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  appCatalogFetcher: typeof DataFetcher;
  appImage: typeof PlasmicImg__;
  apiUrlInput: typeof TextInput;
  httpsappstoredarkubeapphmvrToken: "a";
  tokenInput: typeof TextInput;
  orgFetcher: typeof DataFetcher;
  orgSelect: typeof Select;
  zoneFetcher: typeof DataFetcher;
  zoneSelect: typeof Select;
  nsFetcher: typeof DataFetcher;
  nameSpaceSelect: typeof Select;
  appNameInput: typeof TextInput;
  domainInput: typeof TextInput;
  httpRestApiFetcher: typeof DataFetcher;
  domainText: "div";
  installButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDeploy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDeploy__VariantsArgs;
    args?: PlasmicDeploy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDeploy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDeploy__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDeploy__ArgProps,
          internalVariantPropNames: PlasmicDeploy__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDeploy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDeploy";
  } else {
    func.displayName = `PlasmicDeploy.${nodeName}`;
  }
  return func;
}

export const PlasmicDeploy = Object.assign(
  // Top-level PlasmicDeploy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    appCatalogFetcher: makeNodeComponent("appCatalogFetcher"),
    appImage: makeNodeComponent("appImage"),
    apiUrlInput: makeNodeComponent("apiUrlInput"),
    httpsappstoredarkubeapphmvrToken: makeNodeComponent(
      "httpsappstoredarkubeapphmvrToken"
    ),
    tokenInput: makeNodeComponent("tokenInput"),
    orgFetcher: makeNodeComponent("orgFetcher"),
    orgSelect: makeNodeComponent("orgSelect"),
    zoneFetcher: makeNodeComponent("zoneFetcher"),
    zoneSelect: makeNodeComponent("zoneSelect"),
    nsFetcher: makeNodeComponent("nsFetcher"),
    nameSpaceSelect: makeNodeComponent("nameSpaceSelect"),
    appNameInput: makeNodeComponent("appNameInput"),
    domainInput: makeNodeComponent("domainInput"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    domainText: makeNodeComponent("domainText"),
    installButton: makeNodeComponent("installButton"),

    // Metadata about props expected for PlasmicDeploy
    internalVariantProps: PlasmicDeploy__VariantProps,
    internalArgProps: PlasmicDeploy__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDeploy;
/* prettier-ignore-end */

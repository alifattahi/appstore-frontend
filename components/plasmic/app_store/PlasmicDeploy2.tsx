// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kE2m6SaQqQewvhrZdkGhrf
// Component: QW0-gAwjJnGE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: 20BEVE161Tub/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Select from "../../Select"; // plasmic-import: IPsHMEFnMbCe/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: kE2m6SaQqQewvhrZdkGhrf/projectcss
import sty from "./PlasmicDeploy2.module.css"; // plasmic-import: QW0-gAwjJnGE/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: akcTM9Ae0af4/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: LwBmQ7p7bmsl/icon

createPlasmicElementProxy;

export type PlasmicDeploy2__VariantMembers = {};
export type PlasmicDeploy2__VariantsArgs = {};
type VariantPropType = keyof PlasmicDeploy2__VariantsArgs;
export const PlasmicDeploy2__VariantProps = new Array<VariantPropType>();

export type PlasmicDeploy2__ArgsType = {};
type ArgPropType = keyof PlasmicDeploy2__ArgsType;
export const PlasmicDeploy2__ArgProps = new Array<ArgPropType>();

export type PlasmicDeploy2__OverridesType = {
  root?: Flex__<"div">;
  tokenInput?: Flex__<typeof TextInput>;
  nsFetcher?: Flex__<typeof DataFetcher>;
  freeBox?: Flex__<"div">;
  text?: Flex__<"div">;
  nameSpaceSelect?: Flex__<typeof Select>;
};

export interface DefaultDeploy2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDeploy2__RenderFunc(props: {
  variants: PlasmicDeploy2__VariantsArgs;
  args: PlasmicDeploy2__ArgsType;
  overrides: PlasmicDeploy2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "nameSpaceSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "organizationName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "paziresh24-cloud"
      },
      {
        path: "isDomainValid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "installing",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tokenInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <TextInput
            data-plasmic-name={"tokenInput"}
            data-plasmic-override={overrides.tokenInput}
            className={classNames("__wab_instance", sty.tokenInput)}
            name={"TokenInput"}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["tokenInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={"\u062a\u0648\u06a9\u0646"}
            required={true}
            value={
              generateStateValueProp($state, ["tokenInput", "value"]) ?? ""
            }
          />

          <DataFetcher
            data-plasmic-name={"nsFetcher"}
            data-plasmic-override={overrides.nsFetcher}
            className={classNames("__wab_instance", sty.nsFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
            }
            errorName={"fetchError"}
            headers={(() => {
              try {
                return {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                  token: $state.tokenInput.value
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {};
                }
                throw e;
              }
            })()}
            loadingDisplay={null}
            method={"GET"}
            noLayout={false}
            url={(() => {
              try {
                return "https://fti-workflow.paziresh24.com/webhook/54f0a644-6cc3-43c9-a1c2-408928f596ce/hmrv/4805/65";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <DataCtxReader__>
              {$ctx => (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"\u0641\u0636\u0627\u06cc \u0646\u0627\u0645"}
                  </div>
                  <Select
                    data-plasmic-name={"nameSpaceSelect"}
                    data-plasmic-override={overrides.nameSpaceSelect}
                    className={classNames(
                      "__wab_instance",
                      sty.nameSpaceSelect
                    )}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "nameSpaceSelect",
                        "value"
                      ])(eventArgs[0]);
                    }}
                    options={(() => {
                      try {
                        return $ctx.fetchedData.map(item => ({
                          label: item.name,
                          value: item.id
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={"Select\u2026"}
                    value={generateStateValueProp($state, [
                      "nameSpaceSelect",
                      "value"
                    ])}
                  />
                </Stack__>
              )}
            </DataCtxReader__>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tokenInput",
    "nsFetcher",
    "freeBox",
    "text",
    "nameSpaceSelect"
  ],
  tokenInput: ["tokenInput"],
  nsFetcher: ["nsFetcher", "freeBox", "text", "nameSpaceSelect"],
  freeBox: ["freeBox", "text", "nameSpaceSelect"],
  text: ["text"],
  nameSpaceSelect: ["nameSpaceSelect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tokenInput: typeof TextInput;
  nsFetcher: typeof DataFetcher;
  freeBox: "div";
  text: "div";
  nameSpaceSelect: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDeploy2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDeploy2__VariantsArgs;
    args?: PlasmicDeploy2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDeploy2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDeploy2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDeploy2__ArgProps,
          internalVariantPropNames: PlasmicDeploy2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDeploy2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDeploy2";
  } else {
    func.displayName = `PlasmicDeploy2.${nodeName}`;
  }
  return func;
}

export const PlasmicDeploy2 = Object.assign(
  // Top-level PlasmicDeploy2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tokenInput: makeNodeComponent("tokenInput"),
    nsFetcher: makeNodeComponent("nsFetcher"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    nameSpaceSelect: makeNodeComponent("nameSpaceSelect"),

    // Metadata about props expected for PlasmicDeploy2
    internalVariantProps: PlasmicDeploy2__VariantProps,
    internalArgProps: PlasmicDeploy2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDeploy2;
/* prettier-ignore-end */

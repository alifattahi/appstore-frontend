// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kE2m6SaQqQewvhrZdkGhrf
// Component: MKQ4DewXPl4_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: 20BEVE161Tub/component
import Button from "../../Button"; // plasmic-import: SeN-_u-Bb4MZ/component
import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: kE2m6SaQqQewvhrZdkGhrf/projectcss
import sty from "./PlasmicShowLicense.module.css"; // plasmic-import: MKQ4DewXPl4_/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: akcTM9Ae0af4/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: LwBmQ7p7bmsl/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: Uv6mWKVW5aWf/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 2-hCShwmKMk5/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: BAmC-AZA_wmG/icon

createPlasmicElementProxy;

export type PlasmicShowLicense__VariantMembers = {};
export type PlasmicShowLicense__VariantsArgs = {};
type VariantPropType = keyof PlasmicShowLicense__VariantsArgs;
export const PlasmicShowLicense__VariantProps = new Array<VariantPropType>();

export type PlasmicShowLicense__ArgsType = {};
type ArgPropType = keyof PlasmicShowLicense__ArgsType;
export const PlasmicShowLicense__ArgProps = new Array<ArgPropType>();

export type PlasmicShowLicense__OverridesType = {
  root?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  button?: Flex__<typeof Button>;
  ariaButton?: Flex__<typeof BaseButton>;
  softBackground?: Flex__<"div">;
  border?: Flex__<"div">;
  interactionEffect?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultShowLicenseProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShowLicense__RenderFunc(props: {
  variants: PlasmicShowLicense__VariantsArgs;
  args: PlasmicShowLicense__ArgsType;
  overrides: PlasmicShowLicense__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.params.license_token
                ? $ctx.params.license_token
                : "License Not Found";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicShowLicense.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicShowLicense.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicShowLicense.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pFozg)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__a3IgM)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__b1ZWq)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fzZwY
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ textDecoration: "underline" }}
                    >
                      {
                        "\u0644\u0627\u06cc\u0633\u0646\u0633 \u0634\u0645\u0627 \u0622\u0645\u0627\u062f\u0647 \u0627\u0633\u062a"
                      }
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Eg59
                  )}
                >
                  {
                    "\u0636\u0645\u0646 \u062a\u0634\u06a9\u0631 \u0627\u0632 \u062e\u0631\u06cc\u062f \u0634\u0645\u0627\u060c\u200c\u0647\u0645 \u0627\u06a9\u0646\u0648\u0646 \u0628\u0627\u06cc\u062f \u0644\u0627\u06cc\u0633\u0646\u0633 \u062e\u0648\u062f \u0631\u0627 \u06a9\u067e\u06cc \u06a9\u0631\u062f\u0647 \u0648 \u062f\u0631 \u0645\u0631\u062d\u0644\u0647 \u0646\u0635\u0628 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                  }
                </div>
                {(() => {
                  const child$Props = {
                    autoFocus: true,
                    className: classNames("__wab_instance", sty.textInput),
                    isDisabled: true,
                    name: "license",
                    onChange: async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    type: "text",
                    value:
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "textInput.value",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return $ctx.params.license_token
                                ? $ctx.params.license_token
                                : "License Not Found";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    []
                  );
                  return (
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      {...child$Props}
                    />
                  );
                })()}
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__del8R
                    )}
                  >
                    {"\u06a9\u067e\u06cc \u0644\u0627\u06cc\u0633\u0646\u0633"}
                  </div>
                </Button>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ceCd6)}
                >
                  <BaseButton
                    data-plasmic-name={"ariaButton"}
                    data-plasmic-override={overrides.ariaButton}
                    className={classNames("__wab_instance", sty.ariaButton)}
                    onPress={async event => {
                      const $steps = {};

                      $steps["goToDeploy"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/deploy/${(() => {
                                try {
                                  return $ctx.params.app;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}/${(() => {
                                try {
                                  return $ctx.params.required_license;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToDeploy"] != null &&
                        typeof $steps["goToDeploy"] === "object" &&
                        typeof $steps["goToDeploy"].then === "function"
                      ) {
                        $steps["goToDeploy"] = await $steps["goToDeploy"];
                      }
                    }}
                    target={$props.openLinkInNewTab ? "_blank" : "_self"}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"softBackground"}
                        data-plasmic-override={overrides.softBackground}
                        className={classNames(
                          projectcss.all,
                          sty.softBackground
                        )}
                      />
                    ) : null}
                    {false ? (
                      <div
                        data-plasmic-name={"border"}
                        data-plasmic-override={overrides.border}
                        className={classNames(projectcss.all, sty.border)}
                      />
                    ) : null}
                    <div
                      data-plasmic-name={"interactionEffect"}
                      data-plasmic-override={overrides.interactionEffect}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect
                      )}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0Ad4T
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tDdg5
                        )}
                      >
                        <CircleIcon
                          className={classNames(projectcss.all, sty.svg__o98Uj)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wuo4E
                        )}
                      >
                        {"\u0628\u0632\u0646 \u0628\u0631\u06cc\u0645"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tmrhB
                        )}
                      >
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__ujNt4)}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                  </BaseButton>
                  <PlasmicLink__
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link
                    )}
                    component={Link}
                    href={"https://www.plasmic.app/"}
                    platform={"nextjs"}
                  >
                    {"Learn more..."}
                  </PlasmicLink__>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "textInput",
    "button",
    "ariaButton",
    "softBackground",
    "border",
    "interactionEffect",
    "link"
  ],
  textInput: ["textInput"],
  button: ["button"],
  ariaButton: ["ariaButton", "softBackground", "border", "interactionEffect"],
  softBackground: ["softBackground"],
  border: ["border"],
  interactionEffect: ["interactionEffect"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  textInput: typeof TextInput;
  button: typeof Button;
  ariaButton: typeof BaseButton;
  softBackground: "div";
  border: "div";
  interactionEffect: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShowLicense__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShowLicense__VariantsArgs;
    args?: PlasmicShowLicense__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShowLicense__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShowLicense__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShowLicense__ArgProps,
          internalVariantPropNames: PlasmicShowLicense__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShowLicense__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShowLicense";
  } else {
    func.displayName = `PlasmicShowLicense.${nodeName}`;
  }
  return func;
}

export const PlasmicShowLicense = Object.assign(
  // Top-level PlasmicShowLicense renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    ariaButton: makeNodeComponent("ariaButton"),
    softBackground: makeNodeComponent("softBackground"),
    border: makeNodeComponent("border"),
    interactionEffect: makeNodeComponent("interactionEffect"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicShowLicense
    internalVariantProps: PlasmicShowLicense__VariantProps,
    internalArgProps: PlasmicShowLicense__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "License Info",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicShowLicense;
/* prettier-ignore-end */

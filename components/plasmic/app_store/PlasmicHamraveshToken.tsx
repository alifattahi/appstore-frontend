// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kE2m6SaQqQewvhrZdkGhrf
// Component: wia2M04pK3E5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: kE2m6SaQqQewvhrZdkGhrf/projectcss
import sty from "./PlasmicHamraveshToken.module.css"; // plasmic-import: wia2M04pK3E5/css

createPlasmicElementProxy;

export type PlasmicHamraveshToken__VariantMembers = {};
export type PlasmicHamraveshToken__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamraveshToken__VariantsArgs;
export const PlasmicHamraveshToken__VariantProps = new Array<VariantPropType>();

export type PlasmicHamraveshToken__ArgsType = {};
type ArgPropType = keyof PlasmicHamraveshToken__ArgsType;
export const PlasmicHamraveshToken__ArgProps = new Array<ArgPropType>();

export type PlasmicHamraveshToken__OverridesType = {
  hamraveshToken?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  httpsconsolehamraveshcomprofileapiKeys?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHamraveshTokenProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamraveshToken__RenderFunc(props: {
  variants: PlasmicHamraveshToken__VariantsArgs;
  args: PlasmicHamraveshToken__ArgsType;
  overrides: PlasmicHamraveshToken__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHamraveshToken.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHamraveshToken.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHamraveshToken.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"hamraveshToken"}
          data-plasmic-override={overrides.hamraveshToken}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.hamraveshToken
          )}
          dir={"rtl"}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__x5Lt9
              )}
            >
              {
                "\u0645\u0631\u0627\u062d\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u062a\u0648\u06a9\u0646 \u0647\u0645\u200c\u0631\u0648\u0634\n1- \u0627\u0628\u062a\u062f\u0627 \u0648\u0627\u0631\u062f \u067e\u0646\u0644 \u06a9\u0627\u0631\u0628\u0631\u06cc \u062e\u0648\u062f \u0634\u0648\u06cc\u062f \u0648 \u0627\u0632 \u0645\u0646\u0648\u06cc \u0628\u0627\u0644\u0627 \u0628\u062e\u0634 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
              }
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__kUHyr)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/app_store/images/_1Png.png",
                fullWidth: 297,
                fullHeight: 467,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cqLd
              )}
            >
              {
                "\n\u06f2- \u0633\u067e\u0633 \u0628\u062e\u0634 \u06a9\u0644\u06cc\u062f\u0647\u0627\u06cc API \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u0648 \u0633\u0627\u062e\u062a \u06a9\u0644\u06cc\u062f API \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0647\u06cc\u062f"
              }
            </div>
            <PlasmicLink__
              data-plasmic-name={"httpsconsolehamraveshcomprofileapiKeys"}
              data-plasmic-override={
                overrides.httpsconsolehamraveshcomprofileapiKeys
              }
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.httpsconsolehamraveshcomprofileapiKeys
              )}
              component={Link}
              href={"https://console.hamravesh.com/profile/api-keys"}
              platform={"nextjs"}
            >
              {
                "\u0644\u06cc\u0646\u06a9 \u0645\u0633\u0642\u06cc\u0645 \u0648\u0631\u0648\u062f \u0628\u0647 \u0628\u062e\u0634 \u062a\u0648\u06a9\u0646 "
              }
            </PlasmicLink__>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__rRQmy)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/app_store/images/_2Png.png",
                fullWidth: 766,
                fullHeight: 391,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__cQgy)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/app_store/images/_3Png.png",
                fullWidth: 558,
                fullHeight: 257,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__pP9Pk)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/app_store/images/_4Png.png",
                fullWidth: 556,
                fullHeight: 415,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tmWpA
              )}
            >
              {
                "\u062a\u0648\u06a9\u0646 \u0631\u0627 \u06a9\u067e\u06cc \u06a9\u0631\u062f\u0647 \u0648 \u062f\u0631 \u062c\u0627\u06cc \u0627\u0645\u0646 \u0646\u06af\u0647\u062f\u0627\u0631\u06cc \u0646\u0645\u0627\u06cc\u06cc\u062f."
              }
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  hamraveshToken: [
    "hamraveshToken",
    "freeBox",
    "httpsconsolehamraveshcomprofileapiKeys"
  ],
  freeBox: ["freeBox", "httpsconsolehamraveshcomprofileapiKeys"],
  httpsconsolehamraveshcomprofileapiKeys: [
    "httpsconsolehamraveshcomprofileapiKeys"
  ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  hamraveshToken: "div";
  freeBox: "div";
  httpsconsolehamraveshcomprofileapiKeys: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamraveshToken__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamraveshToken__VariantsArgs;
    args?: PlasmicHamraveshToken__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamraveshToken__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHamraveshToken__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamraveshToken__ArgProps,
          internalVariantPropNames: PlasmicHamraveshToken__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamraveshToken__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "hamraveshToken") {
    func.displayName = "PlasmicHamraveshToken";
  } else {
    func.displayName = `PlasmicHamraveshToken.${nodeName}`;
  }
  return func;
}

export const PlasmicHamraveshToken = Object.assign(
  // Top-level PlasmicHamraveshToken renders the root element
  makeNodeComponent("hamraveshToken"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    httpsconsolehamraveshcomprofileapiKeys: makeNodeComponent(
      "httpsconsolehamraveshcomprofileapiKeys"
    ),

    // Metadata about props expected for PlasmicHamraveshToken
    internalVariantProps: PlasmicHamraveshToken__VariantProps,
    internalArgProps: PlasmicHamraveshToken__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Hamravesh Token",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHamraveshToken;
/* prettier-ignore-end */
